import { GatewayApiClient } from './gateway-api';
import { ResultAsync } from 'neverthrow';
import { TransactionStatusResponse } from '@radixdlt/babylon-gateway-api-sdk';
import { ExponentialBackoffInput } from './helpers/exponential-backoff';
import { Logger } from 'tslog';
import { SdkError } from '@radixdlt/wallet-sdk';
export type GatewayClient = ReturnType<typeof GatewayClient>;
export declare const GatewayClient: ({ gatewayApi, logger, retryConfig, }: {
    gatewayApi: GatewayApiClient;
    logger?: Logger<unknown> | undefined;
    retryConfig?: ExponentialBackoffInput | undefined;
}) => {
    pollTransactionStatus: (transactionIntentHashHex: string) => ResultAsync<TransactionStatusResponse, SdkError>;
    getTransactionDetailsRequest: (transactionIntentHashHex: string, stateVersion?: number) => ResultAsync<import("@radixdlt/babylon-gateway-api-sdk").TransactionCommittedDetailsResponse, Error>;
    gatewayApi: {
        getTransactionStatus: (transactionIntentHashHex: string) => Promise<TransactionStatusResponse>;
        getTransactionDetails: (transactionIntentHashHex: string, stateVersion?: number | undefined) => Promise<import("@radixdlt/babylon-gateway-api-sdk").TransactionCommittedDetailsResponse>;
    };
};
