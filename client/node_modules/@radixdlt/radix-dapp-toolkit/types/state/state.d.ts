import { Logger } from 'tslog';
import { StateSubjects } from './subjects';
import { ConnectButtonProvider, DataRequestInput, OnDisconnectCallback, OnInitCallback, RequestData, RequestDataOutput, State, StorageProvider } from '../_types';
import { WalletClient } from '../wallet/wallet-client';
import { GetState } from './helpers/get-state';
import { SdkError } from '@radixdlt/wallet-sdk';
export declare const defaultState: State;
export type StateClient = ReturnType<typeof StateClient>;
export declare const StateClient: (input: {
    key: string;
    initialState?: State | undefined;
    subjects: StateSubjects;
    logger?: Logger<unknown> | undefined;
    connectButtonClient: ConnectButtonProvider;
    walletClient: WalletClient;
    storageClient: StorageProvider;
    connectRequest?: ((requestData: RequestData) => RequestDataOutput) | undefined;
    onInitCallback: OnInitCallback;
    onDisconnectCallback: OnDisconnectCallback;
    useDoneCallback?: boolean | undefined;
    getState: GetState;
    useCache?: boolean | undefined;
}) => {
    connected$: import("rxjs").Observable<boolean>;
    setConnected: (value: boolean) => void;
    requestData: (value: DataRequestInput) => import("neverthrow").ResultAsync<{
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
        personaData: {
            value: string;
            field: "emailAddress" | "familyName" | "givenName" | "phoneNumber";
        }[];
        persona: {
            label: string;
            identityAddress: string;
        } | undefined;
    }, SdkError>;
    destroy: () => void;
    subjects: {
        connected: import("rxjs").ReplaySubject<boolean>;
        accounts: import("rxjs").ReplaySubject<{
            address: string;
            label: string;
            appearanceId: number;
        }[] | undefined>;
        persona: import("rxjs").ReplaySubject<{
            identityAddress: string;
            label: string;
        } | undefined>;
        onInit: import("rxjs").ReplaySubject<State>;
        state$: import("rxjs").ReplaySubject<State>;
        setState: import("rxjs").Subject<{
            state: Partial<State>;
            persist: boolean;
        }>;
        updateSharedData: import("rxjs").Subject<void>;
    };
    state$: import("rxjs").ReplaySubject<State>;
    reset: () => void;
};
