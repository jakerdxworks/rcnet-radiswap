import { ManifestAstValue } from "../../models/value";
export declare abstract class Instruction {
    readonly instruction: Kind;
    constructor(instruction: Kind);
    abstract toString(): string;
}
export declare enum Kind {
    CallFunction = "CALL_FUNCTION",
    CallMethod = "CALL_METHOD",
    TakeFromWorktop = "TAKE_FROM_WORKTOP",
    TakeFromWorktopByAmount = "TAKE_FROM_WORKTOP_BY_AMOUNT",
    TakeFromWorktopByIds = "TAKE_FROM_WORKTOP_BY_IDS",
    ReturnToWorktop = "RETURN_TO_WORKTOP",
    AssertWorktopContains = "ASSERT_WORKTOP_CONTAINS",
    AssertWorktopContainsByAmount = "ASSERT_WORKTOP_CONTAINS_BY_AMOUNT",
    AssertWorktopContainsByIds = "ASSERT_WORKTOP_CONTAINS_BY_IDS",
    PopFromAuthZone = "POP_FROM_AUTH_ZONE",
    PushToAuthZone = "PUSH_TO_AUTH_ZONE",
    ClearAuthZone = "CLEAR_AUTH_ZONE",
    ClearSignatureProofs = "CLEAR_SIGNATURE_PROOFS",
    CreateProofFromAuthZone = "CREATE_PROOF_FROM_AUTH_ZONE",
    CreateProofFromAuthZoneByAmount = "CREATE_PROOF_FROM_AUTH_ZONE_BY_AMOUNT",
    CreateProofFromAuthZoneByIds = "CREATE_PROOF_FROM_AUTH_ZONE_BY_IDS",
    CreateProofFromBucket = "CREATE_PROOF_FROM_BUCKET",
    CloneProof = "CLONE_PROOF",
    DropProof = "DROP_PROOF",
    DropAllProofs = "DROP_ALL_PROOFS",
    PublishPackage = "PUBLISH_PACKAGE",
    BurnResource = "BURN_RESOURCE",
    RecallResource = "RECALL_RESOURCE",
    SetMetadata = "SET_METADATA",
    RemoveMetadata = "REMOVE_METADATA",
    SetPackageRoyaltyConfig = "SET_PACKAGE_ROYALTY_CONFIG",
    SetComponentRoyaltyConfig = "SET_COMPONENT_ROYALTY_CONFIG",
    ClaimPackageRoyalty = "CLAIM_PACKAGE_ROYALTY",
    ClaimComponentRoyalty = "CLAIM_COMPONENT_ROYALTY",
    SetMethodAccessRule = "SET_METHOD_ACCESS_RULE",
    MintFungible = "MINT_FUNGIBLE",
    MintNonFungible = "MINT_NON_FUNGIBLE",
    MintUuidNonFungible = "MINT_UUID_NON_FUNGIBLE",
    CreateFungibleResource = "CREATE_FUNGIBLE_RESOURCE",
    CreateFungibleResourceWithInitialSupply = "CREATE_FUNGIBLE_RESOURCE_WITH_INITIAL_SUPPLY",
    CreateNonFungibleResource = "CREATE_NON_FUNGIBLE_RESOURCE",
    CreateNonFungibleResourceWithInitialSupply = "CREATE_NON_FUNGIBLE_RESOURCE_WITH_INITIAL_SUPPLY",
    CreateAccessController = "CREATE_ACCESS_CONTROLLER",
    CreateIdentity = "CREATE_IDENTITY",
    AssertAccessRule = "ASSERT_ACCESS_RULE",
    CreateValidator = "CREATE_VALIDATOR",
    CreateAccount = "CREATE_ACCOUNT"
}
/**
 * An instruction to call a function with the given list of arguments on the given package address
 * and blueprint name.
 */
export declare class CallFunction extends Instruction {
    packageAddress: ManifestAstValue.Address;
    blueprintName: ManifestAstValue.String;
    functionName: ManifestAstValue.String;
    arguments: Array<ManifestAstValue.Value> | null;
    constructor(packageAddress: ManifestAstValue.Address, blueprintName: ManifestAstValue.String, functionName: ManifestAstValue.String, args?: Array<ManifestAstValue.Value> | null);
    toString(): string;
    toObject(): Record<string, any>;
}
/**
 * An instruction to call a method with a given name on a given component address with the given
 * list of arguments.
 */
export declare class CallMethod extends Instruction {
    componentAddress: ManifestAstValue.Address;
    methodName: ManifestAstValue.String;
    arguments: Array<ManifestAstValue.Value> | null;
    constructor(componentAddress: ManifestAstValue.Address, methodName: ManifestAstValue.String, args?: Array<ManifestAstValue.Value> | null);
    toString(): string;
    toObject(): Record<string, any>;
}
/**
 * An instruction to take the entire amount of a given resource address from the worktop and put it
 * in a bucket.
 */
export declare class TakeFromWorktop extends Instruction {
    resourceAddress: ManifestAstValue.Address;
    intoBucket: ManifestAstValue.Bucket;
    constructor(resourceAddress: ManifestAstValue.Address, intoBucket: ManifestAstValue.Bucket);
    toString(): string;
    toObject(): Record<string, any>;
}
/**
 * An instruction to take the an amount of a given resource address from the worktop and put it in a
 * bucket.
 */
export declare class TakeFromWorktopByAmount extends Instruction {
    resourceAddress: ManifestAstValue.Address;
    amount: ManifestAstValue.Decimal;
    intoBucket: ManifestAstValue.Bucket;
    constructor(resourceAddress: ManifestAstValue.Address, amount: ManifestAstValue.Decimal, intoBucket: ManifestAstValue.Bucket);
    toString(): string;
    toObject(): Record<string, any>;
}
/**
 * An instruction to take the a set of non-fungible ids of a given resource address from the worktop
 * and put it in a bucket.
 */
export declare class TakeFromWorktopByIds extends Instruction {
    resourceAddress: ManifestAstValue.Address;
    ids: Array<ManifestAstValue.NonFungibleLocalId>;
    intoBucket: ManifestAstValue.Bucket;
    constructor(resourceAddress: ManifestAstValue.Address, ids: Array<ManifestAstValue.NonFungibleLocalId>, intoBucket: ManifestAstValue.Bucket);
    toString(): string;
    toObject(): Record<string, any>;
}
/**
 * Returns a bucket of tokens to the worktop.
 */
export declare class ReturnToWorktop extends Instruction {
    bucket: ManifestAstValue.Bucket;
    constructor(bucket: ManifestAstValue.Bucket);
    toString(): string;
    toObject(): Record<string, any>;
}
/**
 * An instruction to assert that a given resource exists in the worktop.
 */
export declare class AssertWorktopContains extends Instruction {
    resourceAddress: ManifestAstValue.Address;
    constructor(resourceAddress: ManifestAstValue.Address);
    toString(): string;
    toObject(): Record<string, any>;
}
/**
 * An instruction to assert that a specific amount of a specific resource address exists in the
 * worktop.
 */
export declare class AssertWorktopContainsByAmount extends Instruction {
    resourceAddress: ManifestAstValue.Address;
    amount: ManifestAstValue.Decimal;
    constructor(resourceAddress: ManifestAstValue.Address, amount: ManifestAstValue.Decimal);
    toString(): string;
    toObject(): Record<string, any>;
}
/**
 * An instruction to assert that a set ids of a specific resource address exists in the worktop.
 */
export declare class AssertWorktopContainsByIds extends Instruction {
    resourceAddress: ManifestAstValue.Address;
    ids: Array<ManifestAstValue.NonFungibleLocalId>;
    constructor(resourceAddress: ManifestAstValue.Address, ids: Array<ManifestAstValue.NonFungibleLocalId>);
    toString(): string;
    toObject(): Record<string, any>;
}
/**
 * An instruction which pops a proof from the AuthZone stack and into an identifiable proof
 */
export declare class PopFromAuthZone extends Instruction {
    intoProof: ManifestAstValue.Proof;
    constructor(intoProof: ManifestAstValue.Proof);
    toString(): string;
    toObject(): Record<string, any>;
}
/**
 * An instruction that pushes a proof to the auth zone stack.
 */
export declare class PushToAuthZone extends Instruction {
    proof: ManifestAstValue.Proof;
    constructor(proof: ManifestAstValue.Proof);
    toString(): string;
    toObject(): Record<string, any>;
}
/**
 * An instruction which clears the auth zone stack by dropping all of the proofs in that stack.
 */
export declare class ClearAuthZone extends Instruction {
    constructor();
    toString(): string;
    toObject(): Record<string, any>;
}
/**
 * Clears all the proofs of signature virtual badges.
 */
export declare class ClearSignatureProofs extends Instruction {
    constructor();
    toString(): string;
    toObject(): Record<string, any>;
}
/**
 * An instruction to create a proof of the entire amount of a given resource address from the auth
 * zone.
 */
export declare class CreateProofFromAuthZone extends Instruction {
    resourceAddress: ManifestAstValue.Address;
    intoProof: ManifestAstValue.Proof;
    constructor(resourceAddress: ManifestAstValue.Address, intoProof: ManifestAstValue.Proof);
    toString(): string;
    toObject(): Record<string, any>;
}
/**
 * An instruction to create a proof of the an amount of a given resource address from the auth zone.
 */
export declare class CreateProofFromAuthZoneByAmount extends Instruction {
    resourceAddress: ManifestAstValue.Address;
    amount: ManifestAstValue.Decimal;
    intoProof: ManifestAstValue.Proof;
    constructor(resourceAddress: ManifestAstValue.Address, amount: ManifestAstValue.Decimal, intoProof: ManifestAstValue.Proof);
    toString(): string;
    toObject(): Record<string, any>;
}
/**
 * An instruction to create a proof of the a set of non-fungible ids of a given resource address
 * from the auth zone.
 */
export declare class CreateProofFromAuthZoneByIds extends Instruction {
    resourceAddress: ManifestAstValue.Address;
    ids: Array<ManifestAstValue.NonFungibleLocalId>;
    intoProof: ManifestAstValue.Proof;
    constructor(resourceAddress: ManifestAstValue.Address, ids: Array<ManifestAstValue.NonFungibleLocalId>, intoProof: ManifestAstValue.Proof);
    toString(): string;
    toObject(): Record<string, any>;
}
/**
 * An instruction to create a proof given a bucket of some resources
 */
export declare class CreateProofFromBucket extends Instruction {
    bucket: ManifestAstValue.Bucket;
    intoProof: ManifestAstValue.Proof;
    constructor(bucket: ManifestAstValue.Bucket, intoProof: ManifestAstValue.Proof);
    toString(): string;
    toObject(): Record<string, any>;
}
/**
 * An instruction to clone a proof creating a second proof identical to the original
 */
export declare class CloneProof extends Instruction {
    proof: ManifestAstValue.Proof;
    intoProof: ManifestAstValue.Proof;
    constructor(proof: ManifestAstValue.Proof, intoProof: ManifestAstValue.Proof);
    toString(): string;
    toObject(): Record<string, any>;
}
/**
 * An instruction to drop a proof.
 */
export declare class DropProof extends Instruction {
    proof: ManifestAstValue.Proof;
    constructor(proof: ManifestAstValue.Proof);
    toString(): string;
    toObject(): Record<string, any>;
}
/**
 * An instruction to drop all proofs currently present in the transaction context.
 */
export declare class DropAllProofs extends Instruction {
    constructor();
    toString(): string;
    toObject(): Record<string, any>;
}
/**
 * An instruction to publish a package and set it's associated royalty configs, metadata, and access
 * rules.
 */
export declare class PublishPackage extends Instruction {
    code: ManifestAstValue.Blob;
    schema: ManifestAstValue.Blob;
    royaltyConfig: ManifestAstValue.Map;
    metadata: ManifestAstValue.Map;
    accessRules: ManifestAstValue.Value;
    constructor(code: ManifestAstValue.Blob, schema: ManifestAstValue.Blob, royaltyConfig: ManifestAstValue.Map, metadata: ManifestAstValue.Map, accessRules: ManifestAstValue.Value);
    toString(): string;
    toObject(): Record<string, any>;
}
/**
 * An instruction to burn a bucket of tokens.
 */
export declare class BurnResource extends Instruction {
    bucket: ManifestAstValue.Bucket;
    constructor(bucket: ManifestAstValue.Bucket);
    toString(): string;
    toObject(): Record<string, any>;
}
/**
 * An instruction ot recall resources from a known vault.
 */
export declare class RecallResource extends Instruction {
    vaultId: ManifestAstValue.Bytes;
    amount: ManifestAstValue.Decimal;
    constructor(vaultId: ManifestAstValue.Bytes, amount: ManifestAstValue.Decimal);
    toString(): string;
    toObject(): Record<string, any>;
}
/**
 * An instruction to set the metadata on an entity.
 */
export declare class SetMetadata extends Instruction {
    entityAddress: ManifestAstValue.Address;
    key: ManifestAstValue.String;
    value: ManifestAstValue.Enum;
    constructor(entityAddress: ManifestAstValue.Address, key: ManifestAstValue.String, value: ManifestAstValue.Enum);
    toString(): string;
    toObject(): Record<string, any>;
}
/**
 * An instruction to set the metadata on an entity.
 */
export declare class RemoveMetadata extends Instruction {
    entityAddress: ManifestAstValue.Address;
    key: ManifestAstValue.String;
    constructor(entityAddress: ManifestAstValue.Address, key: ManifestAstValue.String);
    toString(): string;
    toObject(): Record<string, any>;
}
/**
 * An instruction to modify the royalties of a package.
 */
export declare class SetPackageRoyaltyConfig extends Instruction {
    packageAddress: ManifestAstValue.Address;
    royaltyConfig: ManifestAstValue.Map;
    constructor(packageAddress: ManifestAstValue.Address, royaltyConfig: ManifestAstValue.Map);
    toString(): string;
    toObject(): Record<string, any>;
}
/**
 * An instruction to modify the royalties on a component
 */
export declare class SetComponentRoyaltyConfig extends Instruction {
    componentAddress: ManifestAstValue.Address;
    royaltyConfig: ManifestAstValue.Tuple;
    constructor(componentAddress: ManifestAstValue.Address, royaltyConfig: ManifestAstValue.Tuple);
    toString(): string;
    toObject(): Record<string, any>;
}
/**
 * An instruction to claim royalties of a package
 */
export declare class ClaimPackageRoyalty extends Instruction {
    packageAddress: ManifestAstValue.Address;
    constructor(packageAddress: ManifestAstValue.Address);
    toString(): string;
    toObject(): Record<string, any>;
}
/**
 * An instruction to claim royalties of a component
 */
export declare class ClaimComponentRoyalty extends Instruction {
    componentAddress: ManifestAstValue.Address;
    constructor(componentAddress: ManifestAstValue.Address);
    toString(): string;
    toObject(): Record<string, any>;
}
/**
 * An instruction to modify the access rules of a method that an entity has.
 */
export declare class SetMethodAccessRule extends Instruction {
    entityAddress: ManifestAstValue.Address;
    key: ManifestAstValue.Tuple;
    rule: ManifestAstValue.Enum;
    constructor(entityAddress: ManifestAstValue.Address, key: ManifestAstValue.Tuple, rule: ManifestAstValue.Enum);
    toString(): string;
    toObject(): Record<string, any>;
}
/**
 * An instruction to mint fungible resources
 */
export declare class MintFungible extends Instruction {
    resourceAddress: ManifestAstValue.Address;
    amount: ManifestAstValue.Decimal;
    constructor(resourceAddress: ManifestAstValue.Address, amount: ManifestAstValue.Decimal);
    toString(): string;
    toObject(): Record<string, any>;
}
/**
 * An instruction to mint non-fungibles of a resource
 */
export declare class MintNonFungible extends Instruction {
    resourceAddress: ManifestAstValue.Address;
    entries: ManifestAstValue.Map;
    constructor(resourceAddress: ManifestAstValue.Address, entries: ManifestAstValue.Map);
    toString(): string;
    toObject(): Record<string, any>;
}
/**
 * An instruction to mint non-fungibles of a non-fungible resource that uses UUID as the type id and
 * perform auto incrimination of ID.
 */
export declare class MintUuidNonFungible extends Instruction {
    resourceAddress: ManifestAstValue.Address;
    entries: ManifestAstValue.Array;
    constructor(resourceAddress: ManifestAstValue.Address, entries: ManifestAstValue.Array);
    toString(): string;
    toObject(): Record<string, any>;
}
/**
 * An instruction to create a new fungible resource.
 */
export declare class CreateFungibleResource extends Instruction {
    divisibility: ManifestAstValue.U8;
    metadata: ManifestAstValue.Map;
    accessRules: ManifestAstValue.Map;
    constructor(divisibility: ManifestAstValue.U8, metadata: ManifestAstValue.Map, accessRules: ManifestAstValue.Map);
    toString(): string;
    toObject(): Record<string, any>;
}
/**
 * An instruction to create a fungible resource with initial supply
 */
export declare class CreateFungibleResourceWithInitialSupply extends Instruction {
    divisibility: ManifestAstValue.U8;
    metadata: ManifestAstValue.Map;
    accessRules: ManifestAstValue.Map;
    initialSupply: ManifestAstValue.Decimal;
    constructor(divisibility: ManifestAstValue.U8, metadata: ManifestAstValue.Map, accessRules: ManifestAstValue.Map, initialSupply: ManifestAstValue.Decimal);
    toString(): string;
    toObject(): Record<string, any>;
}
/**
 * An instruction to create a new non-fungible resource.
 */
export declare class CreateNonFungibleResource extends Instruction {
    idType: ManifestAstValue.Enum;
    schema: ManifestAstValue.Tuple;
    metadata: ManifestAstValue.Map;
    accessRules: ManifestAstValue.Map;
    constructor(idType: ManifestAstValue.Enum, schema: ManifestAstValue.Tuple, metadata: ManifestAstValue.Map, accessRules: ManifestAstValue.Map);
    toString(): string;
    toObject(): Record<string, any>;
}
/**
 * An instruction to create a non-fungible resource with an initial supply
 */
export declare class CreateNonFungibleResourceWithInitialSupply extends Instruction {
    idType: ManifestAstValue.Enum;
    schema: ManifestAstValue.Tuple;
    metadata: ManifestAstValue.Map;
    accessRules: ManifestAstValue.Map;
    initialSupply: ManifestAstValue.Value;
    constructor(idType: ManifestAstValue.Enum, schema: ManifestAstValue.Tuple, metadata: ManifestAstValue.Map, accessRules: ManifestAstValue.Map, initialSupply: ManifestAstValue.Value);
    toString(): string;
    toObject(): Record<string, any>;
}
/**
 * Creates a new access controller native component with the passed set of rules as the current
 * active rule set and the specified timed recovery delay in minutes.
 */
export declare class CreateAccessController extends Instruction {
    controlledAsset: ManifestAstValue.Bucket;
    ruleSet: ManifestAstValue.Tuple;
    timedRecoveryDelayInMinutes: ManifestAstValue.Some | ManifestAstValue.None | ManifestAstValue.Enum;
    /**
     * The set of rules to use for the access controller's primary, confirmation, and recovery roles.
     */
    /**
     * The set of rules to use for the access controller's primary, confirmation, and recovery roles.
     */
    constructor(controlledAsset: ManifestAstValue.Bucket, ruleSet: ManifestAstValue.Tuple, timedRecoveryDelayInMinutes: ManifestAstValue.Some | ManifestAstValue.None | ManifestAstValue.Enum);
    toString(): string;
    toObject(): Record<string, any>;
}
/**
 * Creates a new identity native component with the passed access rule.
 */
export declare class CreateIdentity extends Instruction {
    accessRule: ManifestAstValue.Enum;
    constructor(accessRule: ManifestAstValue.Enum);
    toString(): string;
    toObject(): Record<string, any>;
}
/**
 * Assert that the given access rule is currently fulfilled by the proofs in the Auth Zone of the
 * transaction
 */
export declare class AssertAccessRule extends Instruction {
    accessRule: ManifestAstValue.Enum;
    constructor(accessRule: ManifestAstValue.Enum);
    toString(): string;
    toObject(): Record<string, any>;
}
/**
 * Creates a validator given the public key of the owner who controls it
 */
export declare class CreateValidator extends Instruction {
    key: ManifestAstValue.Bytes;
    ownerAccessRule: ManifestAstValue.Enum;
    constructor(key: ManifestAstValue.Bytes, ownerAccessRule: ManifestAstValue.Enum);
    toString(): string;
    toObject(): Record<string, any>;
}
/**
 * Creates a new global account component which has the withdraw rule seen in the rule.
 */
export declare class CreateAccount extends Instruction {
    withdrawRule: ManifestAstValue.Enum;
    constructor(withdrawRule: ManifestAstValue.Enum);
    toString(): string;
    toObject(): Record<string, any>;
}
