export type AddressString = `${string}`;
export declare enum TypeId {
    Bool = "Bool",
    I8 = "i8",
    I16 = "i16",
    I32 = "i32",
    I64 = "i64",
    I128 = "i128",
    U8 = "u8",
    U16 = "u16",
    U32 = "u32",
    U64 = "u64",
    U128 = "u128",
    Unit = "Unit",
    String = "String",
    Enum = "Enum",
    Array = "Array",
    Tuple = "Tuple",
    Map = "Map",
    Address = "Address",
    Bucket = "Bucket",
    Proof = "Proof",
    Expression = "Expression",
    Blob = "Blob",
    Decimal = "Decimal",
    PreciseDecimal = "PreciseDecimal",
    NonFungibleLocalId = "NonFungibleLocalId",
    NonFungibleGlobalId = "NonFungibleGlobalId",
    Bytes = "Bytes"
}
export declare class ManifestValueError extends Error {
    constructor(errorMessage: string);
}
export declare const Unit: () => '()';
export declare const Bool: (bool: boolean) => `${boolean}`;
export declare const I8: <T extends number>(num: T) => `${T}i8`;
export declare const I16: <T extends number>(num: T) => `${T}i16`;
export declare const I32: <T extends number>(num: T) => `${T}i32`;
export declare const I64: <T extends string>(num: T) => `${T}i64`;
export declare const I128: <T extends string>(num: T) => `${T}i128`;
export declare const U8: <T extends number>(num: T) => `${T}u8`;
export declare const U16: <T extends number>(num: T) => `${T}u16`;
export declare const U32: <T extends number>(num: T) => `${T}u32`;
export declare const U64: <T extends string>(num: T) => `${T}u64`;
export declare const U128: <T extends string>(num: T) => `${T}u128`;
export declare const String: <T extends string>(str: T) => `"${T}"`;
export declare const Enum: (field: string | number, ...args: string[]) => string;
export declare const Tuple: <T extends string[]>(...args: T) => `Tuple(${string})`;
export declare const Array: <T extends TypeId>(type: T, ...args: string[]) => `Array<${T}>(${string})`;
export declare const Map: <T extends TypeId, E extends TypeId>(keyType: T, valueType: E, ...args: string[]) => `Map<${T},${E}>(${string})`;
export declare const Address: (address: AddressString) => `Address("${string}")`;
export declare const Bucket: (bucketId: string | number) => `Bucket(${string})`;
export declare const Proof: (proofId: string | number) => `Proof(${string})`;
export declare const Expression: <T extends string>(expression: T) => `Expression("${T}")`;
export declare const Blob: <T extends string>(blob: T) => `Blob("${T}")`;
export declare const Decimal: (num: number) => `Decimal("${string}")`;
export declare const PreciseDecimal: (num: number) => `PreciseDecimal("${string}")`;
export type NonFungibleLocalIdString = `<${string}>` | `#${number}#` | `[${string}]` | `{${string}}`;
export declare const NonFungibleLocalId: {
    String: <T extends string>(id: T) => `NonFungibleLocalId("<${T}>")`;
    Integer: <T_1 extends string | number>(id: T_1) => `NonFungibleLocalId("#${T_1}#")`;
    Byte: <T_2 extends string>(id: T_2) => `NonFungibleLocalId("[${T_2}]")`;
    Uuid: <T_3 extends string>(id: T_3) => `NonFungibleLocalId("{${T_3}}")`;
};
export declare const NonFungibleGlobalId: (id: String) => `NonFungibleGlobalId("${string}")`;
export declare const Bytes: (hex: String) => `Bytes("${string}")`;
