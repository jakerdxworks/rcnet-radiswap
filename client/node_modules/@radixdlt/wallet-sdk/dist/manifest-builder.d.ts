import { AddressString, NonFungibleLocalIdString } from './manifest-value';
export declare class Manifest {
    instructions: string[];
    constructor(instructions: string[]);
    toString(): string;
}
export declare class ManifestBuilder {
    private readonly instructions;
    private readonly buckets;
    private readonly proofs;
    private id_allocator;
    constructor();
    /**
     * Take all the given resource from worktop.
     *
     * @param resourceAddress The resource address
     * @param bucketName The name of the new bucket
     * @returns
     */
    takeFromWorktop(resourceAddress: AddressString, bucketName: string): ManifestBuilder;
    /**
     * Take some amount of resource from worktop.
     *
     * @param amount The amount
     * @param resourceAddresses The resource address
     * @param bucketName The name of the new bucket
     * @returns
     */
    takeFromWorktopByAmount(amount: number, resourceAddresses: AddressString, bucketName: string): ManifestBuilder;
    /**
     * Take some non-fungibles from worktop.
     *
     * @param nonFungibleLocalIds The non-fungible IDs
     * @param resourceAddress The resource address
     * @param bucketName The name of the new bucket
     * @returns
     */
    takeFromWorktopByIds(nonFungibleLocalIds: NonFungibleLocalIdString[], resourceAddress: AddressString, bucketName: string): ManifestBuilder;
    /**
     * Returns a bucket to worktop.
     *
     * @param bucketName The bucket name
     * @returns
     */
    returnToWorktop(bucketName: string): this;
    /**
     * Asserts worktop contains resource.
     *
     * @param resourceAddress The resource address
     * @returns
     */
    assertWorktopContains(resourceAddress: AddressString): ManifestBuilder;
    /**
     * Asserts worktop contains some amount of resource.
     *
     * @param amount The amount
     * @param resourceAddress The resource address
     * @returns
     */
    assertWorktopContainsByAmount(amount: number, resourceAddress: AddressString): ManifestBuilder;
    /**
     * Asserts worktop contains some non-fungibles.
     *
     * @param nonFungibleLocalIds The non-fungible IDs
     * @param resourceAddress The resource address
     * @returns
     */
    assertWorktopContainsByIds(nonFungibleLocalIds: NonFungibleLocalIdString[], resourceAddress: AddressString): ManifestBuilder;
    /**
     * Pops the most recent proof from the auth zone.
     *
     * @param proofName The name of the new proof
     * @returns
     */
    popFromAuthZone(proofName: string): ManifestBuilder;
    /**
     * Pushes a proof onto the auth zone.
     *
     * @param proofName The proof name
     * @returns
     */
    pushToAuthZone(proofName: string): ManifestBuilder;
    /**
     * Clears the auth zone.
     *
     * @returns
     */
    clearAuthZone(): ManifestBuilder;
    /**
     * Creates a composite proof from the auth zone with all the given resource.
     *
     * @param resourceAddress The resource address
     * @param proofName The name of the new proof
     * @returns
     */
    createProofFromAuthZone(resourceAddress: AddressString, proofName: string): ManifestBuilder;
    /**
     * Creates a composite proof from the auth zone for the given amount.
     *
     * @param amount The amount
     * @param resourceAddress The resource address
     * @param proofName The name of the new proof
     * @returns
     */
    createProofFromAuthZoneByAmount(amount: number, resourceAddress: AddressString, proofName: string): ManifestBuilder;
    /**
     * Creates a composite proof from the auth zone for the give non-fungibles.
     *
     * @param nonFungibleLocalIds The non-fungible IDs
     * @param resourceAddress The resource address
     * @param proofName The name of the new proof
     * @returns
     */
    createProofFromAuthZoneByIds(nonFungibleLocalIds: NonFungibleLocalIdString[], resourceAddress: AddressString, proofName: string): ManifestBuilder;
    /**
     * Creates a proof from a bucket
     *
     * @param bucketName The bucket name
     * @param proofName The name of the new proof
     * @returns
     */
    createProofFromBucket(bucketName: string, proofName: string): ManifestBuilder;
    /**
     * Clones a proof.
     *
     * @param proofName The proof name
     * @param cloneName The clone proof name
     * @returns
     */
    cloneProof(proofName: string, cloneName: string): ManifestBuilder;
    /**
     * Drops a proof.
     *
     * @param proofName The proof name
     * @returns
     */
    dropProof(proofName: string): ManifestBuilder;
    /**
     * Calls a function on a blueprint.
     *
     * @param packageAddress  The package address
     * @param blueprintName  The blueprint name
     * @param functionName  The function name
     * @param args The arguments, which must be in manifest format, e.g. `1u8`, `"string"`, `Bucket("name")`
     */
    callFunction(packageAddress: AddressString, blueprintName: string, functionName: string, args: string[]): ManifestBuilder;
    /**
     * Calls a method on a component.
     *
     * @param componentAddress  The component address
     * @param methodName The method name
     * @param args The arguments, which must be in manifest format, e.g. `1u8`, `"string"`, `Bucket("name")`
     * @returns
     */
    callMethod(componentAddress: AddressString, methodName: string, args: string[]): ManifestBuilder;
    /**
     * Mints additional fungible token
     *
     * @param resourceAddress The resource address of the fungible resource
     * @param amount The amount to mint
     * @returns
     */
    mintFungible(resourceAddress: AddressString, amount: number): ManifestBuilder;
    /**
     * Withdraws resource from account.
     *
     * @param accountAddress The account component address
     * @param resourceAddress The resource address
     * @param amount The amount
     * @returns
     */
    withdrawFromAccount(accountAddress: AddressString, resourceAddress: AddressString, amount: number): ManifestBuilder;
    /**
     * Withdraws some non-fungibles from account.
     *
     * @param accountAddress The account component address
     * @param nonFungibleLocalIds The non-fungible IDs
     * @param address The resource address
     * @returns
     */
    withdrawNonFungiblesFromAccount(accountAddress: AddressString, resourceAddress: AddressString, nonFungibleLocalIds: NonFungibleLocalIdString[]): ManifestBuilder;
    /**
     * Creates proof of all the given resource from account.
     *
     * @param accountAddress The account component address
     * @param resourceAddress The resource address
     * @returns
     */
    createProofFromAccount(accountAddress: AddressString, resourceAddress: AddressString): ManifestBuilder;
    /**
     * Creates proof of some amount of resource from account.
     *
     * @param accountAddress The account component address
     * @param resourceAddress The resource address
     * @param amount The amount
     * @returns
     */
    createProofFromAccountByAmount(accountAddress: AddressString, resourceAddress: AddressString, amount: number): ManifestBuilder;
    /**
     * Creates proof of some non-fungibles from account.
     *
     * @param accountAddress The account component address
     * @param nonFungibleLocalIds The non-fungible IDs
     * @param resourceAddress The resource address
     * @returns
     */
    createProofFromAccountByIds(accountAddress: AddressString, resourceAddress: AddressString, nonFungibleLocalIds: NonFungibleLocalIdString[]): ManifestBuilder;
    /**
     * Add any instruction.
     *
     * @param name The instruction name
     * @param args The instruction arguments
     * @returns
     */
    instruction(name: string, args: string[]): ManifestBuilder;
    /**
     * Builds a transaction manifest.
     *
     * @returns a transaction manifest
     */
    build(): Manifest;
}
